<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DarkRift.Server</name>
    </assembly>
    <members>
        <member name="T:DarkRift.Server.ClientDisconnectedEventArgs">
            <summary>
                Event arguments for <see cref="E:DarkRift.Server.ClientManager.ClientDisconnected"/> events.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientDisconnectedEventArgs.Client">
            <summary>
                The Client of the new client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientDisconnectedEventArgs.RemoteTcpEndPoint">
            <summary>
                The remote end point of the TCP connection to this client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientDisconnectedEventArgs.RemoteUdpEndPoint">
            <summary>
                The remote end point of the UDP connection to this client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientDisconnectedEventArgs.LocalDisconnect">
            <summary>
                If the disconnect was requested by a call to <see cref="M:DarkRift.Server.Client.Disconnect"/>.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientDisconnectedEventArgs.Error">
            <summary>
                The error that caused the disconnect.
            </summary>
            <remarks>
                If <see cref="P:DarkRift.Server.ClientDisconnectedEventArgs.LocalDisconnect"/> is true this field will be set to a default value and should be ignored.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.ClientDisconnectedEventArgs.#ctor(DarkRift.Server.IClient,System.Boolean,System.Net.Sockets.SocketError)">
            <summary>
                Creates a new ClientDisconnectedEventArgs from the given data.
            </summary>
            <param name="clientConnection">The ClientConnection of the client.</param>
            <param name="localDisconnect">Whether it was a local call that caused the disconnection.</param>
            <param name="error">The error that caused the disconnect.</param>
        </member>
        <member name="T:DarkRift.Server.CommandSyntaxException">
            <summary>
                Exception indicating a syntax error in a command invocation.
            </summary>
        </member>
        <member name="M:DarkRift.Server.CommandSyntaxException.#ctor">
            <summary>
                Creates a new syntax error.
            </summary>
        </member>
        <member name="M:DarkRift.Server.CommandSyntaxException.#ctor(System.String)">
            <summary>
                Creates a new syntax error with a given message.
            </summary>
        </member>
        <member name="M:DarkRift.Server.CommandSyntaxException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new syntax error with a given message and inner exception.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ConfigurationFileHelper">
            <summary>
                Helper class for reading XML configuration files.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ConfigurationFileHelper.Variables">
            <summary>
                The variables to inject into configuration.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
                Creates a new helper with the specified variables.
            </summary>
            <param name="variables"></param>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadIPAttribute(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            <summary>
                Reads an IP attribute from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="missingErrorString">The message string when the attribute is missing.</param>
            <param name="invalidErrorString">The message string when the attribute is invalid.</param>
            <returns>The IP address read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadIPVersionAttribute(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            <summary>
                Reads an IP version value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="missingErrorString">The message string when the attribute is missing.</param>
            <param name="invalidErrorString">The message string when the attribute is invalid.</param>
            <returns>The ip version read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadBooleanAttribute(System.Xml.Linq.XElement,System.String,System.String,System.Boolean)">
            <summary>
                Reads a Boolean value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="invalidErrorString">The message string when the attribute is invalid.</param>
            <param name="defaultValue">The default value to return if the attribute isn't present.</param>
            <returns>The Boolean read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadByteAttribute(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            <summary>
                Reads a byte value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="missingErrorString">The message string when the attribute is missing.</param>
            <param name="invalidErrorString">The message string when the attribute is invalid.</param>
            <returns>The byte read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadUInt16Attribute(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            <summary>
                Reads a UInt16 value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="missingErrorString">The message string when the attribute is missing.</param>
            <param name="invalidErrorString">The message string when the attribute is invalid.</param>
            <returns>The UInt16 read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadUInt16AttributeOrDefault(System.Xml.Linq.XElement,System.String,System.String,System.UInt16)">
            <summary>
                Reads a UInt16 value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="invalidErrorString">The message string when the attribute is invalid.</param>
            <param name="defaultValue">The default value to return if the attribute isn't present.</param>
            <returns>The UInt16 read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadUInt32AttributeOrDefault(System.Xml.Linq.XElement,System.String,System.String,System.UInt32)">
            <summary>
                Reads a UInt32 value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="invalidErrorString">The message string when the attribute is invalid.</param>
            <param name="defaultValue">The default value to return if the attribute isn't present.</param>
            <returns>The UInt32 read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadStringAttribute(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
                Reads a string value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="missingErrorString">The message string when the attribute is missing.</param>
            <returns>The string read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadStringAttributeOrDefault(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
                Reads a string value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="defaultValue">The default value to return if the attribute isn't present.</param>
            <returns>The string read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadAttributeCollectionTo(System.Xml.Linq.XElement,System.Collections.Specialized.NameValueCollection)">
            <summary>
                Reads a collection of attributes from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="collection">The collection to read into.</param>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadElementCollectionTo``1(System.Xml.Linq.XElement,System.String,System.Func{System.Xml.Linq.XElement,``0},System.Collections.Generic.ICollection{``0})">
            <summary>
                Reads a collection of elements from the XML element supplied.
            </summary>
            <typeparam name="T">The type of the elements to read.</typeparam>
            <param name="element">The element to read from.</param>
            <param name="elementName">The name of the child elements to parse.</param>
            <param name="parseFunction">The function to parse each child element.</param>
            <param name="collection">The collection to write the elements to.</param>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ResolveVariables(System.String)">
            <summary>
                Resolves variables to their values in the given string.
            </summary>
            <param name="str">The string to resolve variables in.</param>
            <returns>The resolved string.</returns>
        </member>
        <member name="T:DarkRift.Server.DarkRiftInfo">
            <summary>
                Class containing info about the DarkRift server running.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftInfo.StartTime">
            <summary>
                The time the server was started.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftInfo.Version">
            <summary>
                The version of the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftInfo.Type">
            <summary>
                The type of server running.
            </summary>
        </member>
        <member name="T:DarkRift.Server.DarkRiftInfo.ServerType">
            <summary>
                The type of server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftInfo.ServerType.Free">
            <summary>
                Indicates the server is the free version.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftInfo.ServerType.Pro">
            <summary>
                Indicates the server is paid for. Yay!
            </summary>
        </member>
        <member name="T:DarkRift.Server.ErrorStrings">
            <summary>
                Collection of DarkRift error strings.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ExtendedPluginBase">
            <summary>
                Base class for all <see cref="!:DataConnector">Data Connectors</see> and <see cref="T:DarkRift.Server.Plugin">Plugins</see>.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ExtendedPluginBase.ThreadSafe">
            <summary>
                Is this plugin able to handle multithreaded events?
            </summary>
            <remarks>
                Enabling this option allows DarkRift to send messages to your plugin from multiple threads simultaneously, 
                greatly increasing performance. Do not enable this unless you are confident that you understand 
                multithreading else you will find yourself with a variety of unfriendly problems to fix!
            </remarks>
        </member>
        <member name="P:DarkRift.Server.ExtendedPluginBase.Commands">
            <summary>
                The commands the plugin has.
            </summary>
            <remarks>
                This is an array of commands that can be executed by this plugin and will be searched through when the 
                command is executed. Changes to this array will be reflected instantly by the command system.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginBase.WriteEvent(System.String,DarkRift.LogType,System.Exception)">
            <summary>
                Writes an event to the server's logs.
            </summary>
            <param name="message">The message to write.</param>
            <param name="logType">The type of message to write.</param>
            <param name="exception">The exception that occurred (if there was one).</param>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginBase.Loaded(DarkRift.Server.LoadedEventArgs)">
            <summary>
                Method that will be called when the server and all plugins have loaded.
            </summary>
            <param name="args">The details of the load.</param>
            <remarks>Pro only.</remarks>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginBase.Install(DarkRift.Server.InstallEventArgs)">
            <summary>
                Method that will be called when the plugin is installed.
            </summary>
            <param name="args">The details of the installation.</param>
            <remarks>Pro only.</remarks>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginBase.Upgrade(DarkRift.Server.UpgradeEventArgs)">
            <summary>
                Method that will be called when the plugin is upgraded.
            </summary>
            <param name="args">The details of the upgrade.</param>
            <remarks>Pro only.</remarks>
        </member>
        <member name="T:DarkRift.Server.IDatabaseManager">
            <summary>
                Manages the connection strings used by server plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IDatabaseManager.Item(System.String)">
            <summary>
                Gets a connection string defined in the configuration file. 
            </summary>
            <param name="providerName">The name of the connection string.</param>
            <returns>
                The connection string.
            </returns>
        </member>
        <member name="M:DarkRift.Server.IDatabaseManager.GetConnectionString(System.String)">
            <summary>
                Gets a connection string defined in the configuration file. 
            </summary>
            <param name="providerName">The name of the connection string.</param>
            <returns>
                The connection string.
            </returns>
        </member>
        <member name="T:DarkRift.Server.PluginManagerBase`1">
            <summary>
                Base plugin manager for plugin managers handling <see cref="T:DarkRift.Server.ExtendedPluginBase"/> types.
            </summary>
            <typeparam name="T">The type of plugin being managed.</typeparam>
        </member>
        <member name="F:DarkRift.Server.PluginManagerBase`1.loaded">
            <summary>
                Has the server finished loading yet?
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginManagerBase`1.plugins">
            <summary>
                The plugins that have been loaded.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginManagerBase`1.Server">
            <summary>
                The DarRiftServer that owns this PluginManagerBase.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.#ctor(DarkRift.Server.DarkRiftServer)">
            <summary>
                Creates a new PluginManager.
            </summary>
            <param name="server">The server that owns this plugin manager.</param>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.LoadPlugin(System.Type,System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
                Load the plugin given.
            </summary>
            <param name="type">The plugin type to load.</param>
            <param name="settings">The settings for this plugin.</param>
            <param name="createResourceDirectory">Whether to create a resource directory or not.</param>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.GetPlugins">
            <summary>
                The plugins loaded.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.GetPlugin(System.String)">
            <summary>
                Gets a plugin by name.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.GetInstalledVersion(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.Uninstall(System.String)">
            <summary>
                Uninstalls a plugin by name, it cannot be currently operating.
            </summary>
            <param name="name">The name of the plugin to uninstall.</param>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.Loaded">
            <summary>
                Invokes the Loaded event on all plugins.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.Dispose">
            <summary>
                Disposes of this PluginManager.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.Dispose(System.Boolean)">
            <summary>
                Disposes of this PluginManager.
            </summary>
            <param name="disposing">Are we disposing?</param>
        </member>
        <member name="T:DarkRift.Server.Plugins.LogWriters.ConsoleWriter">
            <summary>
                Log writer that outputs to the console.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.Version">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.ForegroundColours">
            <summary>
                The lookup table for the foreground colors to print with.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.BackgroundColours">
            <summary>
                The lookup table for the background colours to print with.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.consoleLock">
            <summary>
                Lock for console writes.
            </summary>
            <remarks>
                Technically, Console is thread safe but if we don't have this then colours get mixed up with fast writes.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.#ctor(DarkRift.Server.PluginLoadData)">
            <summary>
                Creates a new console writer with the plugins load data.
            </summary>
            <param name="pluginLoadData">The data to load the plugin with.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.WriteEvent(DarkRift.Server.WriteEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.Plugins.LogWriters.DebugWriter">
            <summary>
                A log writer that writes all output to debug.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.LogWriters.DebugWriter.Version">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.DebugWriter.#ctor(DarkRift.Server.PluginLoadData)">
            <summary>
                Creates a new debug log writer using the given plugin load data.
            </summary>
            <param name="pluginLoadData">The plugin load data for this plugin.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.DebugWriter.WriteEvent(DarkRift.Server.WriteEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.Plugins.LogWriters.FileWriter">
            <summary>
                Creates a new log writer that outputs to a file.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.LogWriters.FileWriter.Version">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.LogWriters.FileWriter.LogFileStream">
            <summary>
                The stream to the log file to write to.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.LogWriters.FileWriter.LogFilePath">
            <summary>
                The directory we are writing to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.FileWriter.#ctor(DarkRift.Server.PluginLoadData)">
            <summary>
                Creates a new file writer with the given plugin load data.
            </summary>
            <param name="pluginLoadData">The plugin load data for this plugin.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.FileWriter.WriteEvent(DarkRift.Server.WriteEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.FileWriter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.DemoCommand">
            <summary>
                Demo command for showing off basic server routing in tutorials.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.IRule">
            <summary>
                Base interface for sniffer rules.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.MessageCommand">
            <summary>
                Helper plugin for sending messages using commands.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.MockCommand">
            <summary>
                Helper plugin for pretending to receive messages using commands.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.PluginController">
            <summary>
                Plugin management plugin.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.RuleGroup">
            <summary>
                Group of sniffer rules.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.Sniffer">
            <summary>
                Packet sniffer plugin.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Commands.Sniffer.rules">
            <summary>
                The rules we are following
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.HelpCommand">
            <summary>
                Help command!
            </summary>
        </member>
        <member name="T:DarkRift.Server.IClient">
            <summary>
                Server representation of a client.
            </summary>
        </member>
        <member name="E:DarkRift.Server.IClient.MessageReceived">
            <summary>
                Event fired when a message is received from this client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClient.ID">
            <summary>
                The ID of the client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClient.RemoteTcpEndPoint">
            <summary>
                The remote end point we are connected to on TCP.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClient.RemoteUdpEndPoint">
            <summary>
                The remote end point we are connected to UDP.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClient.IsConnected">
            <summary>
                Is this client still available?
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClient.Strikes">
            <summary>
                The number of illegal behaviours this client has made.
            </summary>
            <remarks>
                Setter only available in Pro.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.IClient.SendMessage(DarkRift.Message,DarkRift.SendMode)">
            <summary>
                Sends a message to the client.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="sendMode">How the message should be sent.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="M:DarkRift.Server.IClient.Disconnect">
            <summary>
                Disconnects this client from the server.
            </summary>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="T:DarkRift.Server.IClientManager">
            <summary>
                Interface for the connection manager handling connections for the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClientManager.Address">
            <summary>
                The address he server is listening on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClientManager.IPVersion">
            <summary>
                The IP version that the server is listening on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClientManager.Port">
            <summary>
                The port the server is listening on.
            </summary>
        </member>
        <member name="E:DarkRift.Server.IClientManager.ClientConnected">
            <summary>
                Invoked when a client connects to the server.
            </summary>
        </member>
        <member name="E:DarkRift.Server.IClientManager.ClientDisconnected">
            <summary>
                Invoked when a client disconnects from the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClientManager.Count">
            <summary>
                Returns the number of clients currently connected.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClientManager.MaxStrikes">
            <summary>
                The number of strikes a client can get before they are kicked.
            </summary>
        </member>
        <member name="M:DarkRift.Server.IClientManager.GetAllClients">
            <summary>
                Returns all clients connected to this server.
            </summary>
            <returns>An array of clients on the server.</returns>
        </member>
        <member name="P:DarkRift.Server.IClientManager.Item(System.UInt16)">
            <summary>
                Returns the client with the given ID.
            </summary>
            <param name="id">The global ID of the client.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:DarkRift.Server.IClientManager.GetClient(System.UInt16)">
            <summary>
                Returns the client with the given ID.
            </summary>
            <param name="id">The global ID of the client.</param>
            <returns>The client.</returns>
        </member>
        <member name="T:DarkRift.Server.ILogManager">
            <summary>
                An object that manages the server's log writers.
            </summary>
            <remarks>
                Pro only
            </remarks>
        </member>
        <member name="M:DarkRift.Server.ILogManager.GetLogWriterByName(System.String)">
            <summary>
                Searches for a log writer by its name.
            </summary>
            <param name="name">The name of the log writer to find.</param>
            <returns>The log writer.</returns>
        </member>
        <member name="M:DarkRift.Server.ILogManager.GetLogWriterByType``1">
            <summary>
                Searches for log writers by their type.
            </summary>
            <typeparam name="T">The type of the log writer to find.</typeparam>
            <returns>The log writer found.</returns>
        </member>
        <member name="M:DarkRift.Server.ILogManager.GetLogWritersByType``1">
            <summary>
                Searches for log writers by their type.
            </summary>
            <typeparam name="T">The type of the log writer to find.</typeparam>
            <returns>The log writers.</returns>
        </member>
        <member name="P:DarkRift.Server.ILogManager.Item(System.String)">
            <summary>
                Gets a log writer by its name.
            </summary>
            <param name="name">The name of the log writer to find.</param>
            <returns>The log writer.</returns>
        </member>
        <member name="T:DarkRift.Server.InstallEventArgs">
            <summary>
                Event arguments for when a plugin has been installed.
            </summary>
        </member>
        <member name="T:DarkRift.Server.IPluginManager">
            <summary>
                Interface for the plugin manager that handles plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IPluginManager.Item(System.String)">
            <summary>
                Gets the plugin with the specified name.
            </summary>
            <param name="name">The name of the plugin.</param>
            <returns>The plugin.</returns>
            <remarks>
                O(1) complexity.
                This cannot be called during server initialization as not all plugins may 
                have been loaded at that point, consider using the 
                <see cref="!:Plugin.Loaded(LoadedEventArgs)"/> event instead.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.IPluginManager.GetPluginByName(System.String)">
            <summary>
                Gets the plugin with the specified name.
            </summary>
            <param name="name">The name of the plugin.</param>
            <returns>The plugin.</returns>
            <remarks>
                O(1) complexity.
                
                This cannot be called during server initialization as not all plugins may 
                have been loaded at that point, consider using the 
                <see cref="!:Plugin.Loaded(LoadedEventArgs)"/> event instead.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.IPluginManager.GetPluginByType``1">
            <summary>
                Gets the plugin of the given type.
            </summary>
            <typeparam name="T">The type of the plugin to load.</typeparam>
            <returns>The plugin.</returns>
            <remarks>
                O(n) complexity.
                
                This cannot be called during server initialization as not all plugins may 
                have been loaded at that point, consider using the 
                <see cref="!:Plugin.Loaded(LoadedEventArgs)"/> event instead.
            </remarks>
        </member>
        <member name="T:DarkRift.Server.LoadedEventArgs">
            <summary>
                Event arguments for when plugins have loaded.
            </summary>
        </member>
        <member name="T:DarkRift.Server.LogWriter">
            <summary>
                Base class for all log writers.
            </summary>
        </member>
        <member name="M:DarkRift.Server.LogWriter.#ctor(DarkRift.Server.PluginLoadData)">
            <summary>
                Creates a new LogWriter.
            </summary>
            <param name="pluginLoadData">The data to start the log writer with.</param>
        </member>
        <member name="M:DarkRift.Server.LogWriter.WriteEvent(DarkRift.Server.WriteEventArgs)">
            <summary>
                Writes an event to this log writer.
            </summary>
            <param name="args">The message to log.</param>
        </member>
        <member name="F:DarkRift.Server.LogManager.logWriters">
            <summary>
                The log writers to use for messages.
            </summary>
        </member>
        <member name="F:DarkRift.Server.LogManager.writerMatrix">
            <summary>
                The matrix of writers for logging at the right level.
            </summary>
        </member>
        <member name="F:DarkRift.Server.LogManager.server">
            <summary>
                The server this belongs to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.LogManager.LoadWriters(DarkRift.Server.ServerSpawnData.LoggingSettings)">
            <summary>
                Loads the writers found by the plugin factory.
            </summary>
        </member>
        <member name="M:DarkRift.Server.LogManager.WriteEvent(System.String,System.String,DarkRift.LogType,System.Exception)">
            <summary>
                Writes an event to the log file.
            </summary>
            <param name="sender">The object that's reporting this event.</param>
            <param name="message">The details of the event.</param>
            <param name="logType">The type of event that occurred.</param>
            <param name="exception">The exception that caused this log.</param>
        </member>
        <member name="M:DarkRift.Server.LogManager.GetLogWriterByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.LogManager.GetLogWriterByType``1">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.LogManager.GetLogWritersByType``1">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.LogManager.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.NetworkListener">
            <summary>
                Listener for network connections.
            </summary>
        </member>
        <member name="T:DarkRift.Server.NetworkListener.ConnectedHandler">
            <summary>
                Delegate for handling new connections.
            </summary>
            <param name="client">The client that connected.</param>
        </member>
        <member name="P:DarkRift.Server.NetworkListener.Connected">
            <summary>
                Method called when a new client connects.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkListener.tcpListener">
            <summary>
                The TCP listening socket.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkListener.udpListener">
            <summary>
                The UDP listening socket.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkListener.ipVersion">
            <summary>
                The IP version we're listening on.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkListener.noDelay">
            <summary>
                Whether no delay should be set on sockets.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkListener.useFallback">
            <summary>
                Whether the system should use the fallback socket methods for Unity compatability.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkListener.pendingTcpSockets">
            <summary>
                Dictionary of TCP connections awaiting their UDP counterpart.
            </summary>
        </member>
        <member name="T:DarkRift.Server.NetworkListener.PendingConnection">
            <summary>
                Represents a connection to the server awaiting the UDP channel to connect.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkListener.PendingConnection.RemoteEndPoint">
            <summary>
                The TCP endpoint pending.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkListener.PendingConnection.TcpSocket">
            <summary>
                The TCP socket connected.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkListener.PendingConnection.Timer">
            <summary>
                The timer for timing out the connection request.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkListener.udpConnections">
            <summary>
                The UDP connections to the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkListener.server">
            <summary>
                The server hosting us.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.#ctor(DarkRift.Server.DarkRiftServer,DarkRift.IPVersion,System.Boolean,DarkRift.Server.NetworkListener.ConnectedHandler,System.Boolean)">
            <summary>
                Creates a new network listener.
            </summary>
            <param name="server">The server we are hosted on.</param>
            <param name="noDelay">Whether to disable Nagle's algorithm on the socket.</param>
            <param name="ipVersion">The IP version to use.</param>
            <param name="connectedHandler">The handler for new connections.</param>
            <param name="useFallback">Whether to use the fallback network listeners for compatability.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.StartListening(System.Net.IPAddress,System.Int32)">
            <summary>
                Begins accepting new connections.
            </summary>
            <param name="address">The IP address to listen on.</param>
            <param name="port">The port to listen on.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.StartListeningOnStandard">
            <summary>
                Begins accepting new connections on the fallback system for Unity.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.StartListeningOnFallback">
            <summary>
                Begins accepting new connections on the fallback system for Unity.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.TcpAcceptCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when a new client has been accepted.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.FallbackTcpAcceptCompleted(System.IAsyncResult)">
            <summary>
                Called when a new client has been accepted through the fallback accept.
            </summary>
            <param name="result">The result of the accept.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.HandleTcpConnection(System.Net.Sockets.Socket)">
            <summary>
                Handles new TCP connections from main or fallback methods.
            </summary>
            <param name="acceptSocket">The socket accepted.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.ConnectionTimeoutHandler(System.Object)">
            <summary>
                Called when a connection times out due to lack the of a UDP connection.
            </summary>
            <param name="state">The token given to the connection.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.UdpMessageReceived(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when a new UDP packet is received on the listening port.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.FallbackUdpMessageReceived(System.IAsyncResult)">
            <summary>
                Called when a UDP message is received on the fallback system.
            </summary>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.HandleUdpConnection(System.Byte[],System.Net.EndPoint)">
            <summary>
                Handles a new connection to the UDP listener.
            </summary>
            <param name="buffer">The buffer send as an entry.</param>
            <param name="remoteEndPoint">The originating endpoint.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.RegisterUdpConnection(DarkRift.Server.NetworkServerConnection)">
            <summary>
                Subscribes a connection to receive messages.
            </summary>
            <param name="connection">The connection to subscribe.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.UnregisterUdpConnection(DarkRift.Server.NetworkServerConnection)">
            <summary>
                Unsubscribes a connection from receiveing messages.
            </summary>
            <param name="connection">The connection to subscribe.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.SendUdpBuffer(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Action{System.Net.Sockets.SocketError})">
            <summary>
                Sends a buffer to the given endpoint using the UDP socket.
            </summary>
            <param name="remoteEndPoint">The end point to send to.</param>
            <param name="buffer">The buffer to send.</param>
            <param name="offset">The offset to begin sending.</param>
            <param name="count">The length of the buffer from offset to send.</param>
            <param name="completed">The function to invoke once the send is completed.</param>
        </member>
        <member name="T:DarkRift.Server.NetworkServerConnection">
            <summary>
                A connection to a remote cliente and handles TCP and UDP channels.
            </summary>
        </member>
        <member name="T:DarkRift.Server.NetworkServerConnection.MessageReceivedHandler">
            <summary>
                Delegate for handling received messages.
            </summary>
            <param name="data">The data received.</param>
            <param name="mode">The <see cref="T:DarkRift.SendMode"/> used to send the data.</param>
        </member>
        <member name="T:DarkRift.Server.NetworkServerConnection.DisconnectedHandler">
            <summary>
                Delegate for handling disconnections.
            </summary>
            <param name="socketError">The socket error that caused the disconnection.</param>
        </member>
        <member name="P:DarkRift.Server.NetworkServerConnection.MessageReceived">
            <summary>
                The method called when a message has been received.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkServerConnection.Disconnected">
            <summary>
                The method called when this connection is disconnected.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkServerConnection.CanSend">
            <summary>
                Is this client able to send or not.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkServerConnection.IsListening">
            <summary>
                Is this client currently listening for messages or not.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkServerConnection.RemoteTcpEndPoint">
            <summary>
                The end point of the remote client on TCP.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkServerConnection.RemoteUdpEndPoint">
            <summary>
                The end point of the remote client on TCP.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkServerConnection.AuthToken">
            <summary>
                The token used to authenticate this user's UDP connection.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkServerConnection.tcpSocket">
            <summary>
                The socket used in TCP communication.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkServerConnection.networkListener">
            <summary>
                The listener used in UDP communication.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.StartListening">
            <summary>
                Begins listening for data.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.SendMessage(System.Byte[],System.Int32,System.Int32,DarkRift.SendMode)">
            <summary>
                Sends a message using the appropriate protocol.
            </summary>
            <param name="data">The array of data to send</param>
            <param name="offset">The offset of data in the array.</param>
            <param name="count">The number of bytes to send.</param>
            <param name="sendMode">How the message should be sent.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.SendMessageReliable(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Sends a message using TCP.
            </summary>
            <param name="data">The array of data to send.</param>
            <param name="offset">The offset of the data in the array.</param>
            <param name="count">The number of bytes to send.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.SendMessageUnreliable(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Sends a message using UDP.
            </summary>
            <param name="data">The array of data to send.</param>
            <param name="offset">The offset of the data in the array.</param>
            <param name="count">The number of bytes to send.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.Disconnect">
            <summary>
                Disconnects this client from the remote host.
            </summary>
            <returns>Whether the disconnect was successful.</returns>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.TcpHeaderReceiveCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when the 4 byte length header is received by TCP
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.TcpBodyReceiveCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when the body of a TCP message is received.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.HandleUdpMessage(System.Byte[])">
            <summary>
                Handles a UDP message sent to the listener.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.TcpSendCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when a TCP send has completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.UdpSendCompleted(System.Net.Sockets.SocketError)">
            <summary>
                Called when a UDP send has completed.
            </summary>
            <param name="e">The socket error that was returned.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.HandleDisconnection(System.Net.Sockets.SocketError)">
            <summary>
                Called when a socket error has occured.
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:DarkRift.Server.PluginBase">
            <summary>
                Base class for all DarkRift plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.Name">
            <summary>
                The name assigned to this plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.Version">
            <summary>
                The version of this plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.Hidden">
            <summary>
                Should this plugin be hidden from output?
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.DatabaseManager">
            <summary>
                The database manager for the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.Dispatcher">
            <summary>
                The dispatcher for this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.ServerInfo">
            <summary>
                Information about this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.Server">
            <summary>
                The server we have been loaded by.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginBase.#ctor(DarkRift.Server.PluginLoadData)">
            <summary>
                Creates a new plugin base using the given plugin load data.
            </summary>
            <param name="pluginLoadData"></param>
        </member>
        <member name="M:DarkRift.Server.PluginBase.Dispose(System.Boolean)">
            <summary>
                Handles disposing of the plugin.
            </summary>
            <param name="disposing">If the plugin is disposing.</param>
        </member>
        <member name="M:DarkRift.Server.PluginBase.Dispose">
            <summary>
                Disposes of the plugin.
            </summary>
        </member>
        <member name="T:DarkRift.Server.PluginFactory">
            <summary>
                Factory for creating plugins of various types.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginFactory.types">
            <summary>
                The list of types that can be loaded.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginFactory.server">
            <summary>
                The DarRiftServer that owns this PluginManager.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.#ctor(DarkRift.Server.DarkRiftServer)">
            <summary>
                Creates a new PluginFactory.
            </summary>
            <param name="server">The server that owns this plugin factory.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.AddFromSettings(DarkRift.Server.ServerSpawnData.PluginSearchSettings)">
            <summary>
                Adds plugins based on the plugins settings supplied.
            </summary>
            <param name="settings">The settings defining where to find plugins.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.AddDirectory(System.String,System.Boolean)">
            <summary>
                Adds a directory of plugin files to the index.
            </summary>
            <param name="directory">The directory to add.</param>
            <param name="create">Whether to create the directory if not present.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.AddFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Adds the given plugin files into the index.
            </summary>
            <param name="files">An array of filepaths to the plugins.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.AddTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                Adds plugins into the server from the given types.
            </summary>
            <param name="pluginTypes">The types of plugins to add.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.AddFile(System.String)">
            <summary>
                Adds all plugin types in the file to the index.
            </summary>
            <param name="file">The file containing the types.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.AddType(System.Type)">
            <summary>
                Adds a type to the lookup.
            </summary>
            <param name="plugin">The plugin type to add.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.Create``1(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
                Creates a named type as a specified plugin.
            </summary>
            <typeparam name="T">The type of plugin to load it as.</typeparam>
            <param name="type">The name of the type to load.</param>
            <param name="name">The name to assign to the loaded plugin.</param>
            <param name="settings">The settings to give to the plugin.</param>
            <returns>The new plugin.</returns>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.Create``1(System.Type,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
                Creates a type as a specified plugin.
            </summary>
            <typeparam name="T">The type of plugin to load it as.</typeparam>
            <param name="type">The type to load.</param>
            <param name="name">The name to assign to the loaded plugin.</param>
            <param name="settings">The settings to give to the plugin.</param>
            <returns>The new plugin.</returns>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.GetAllSubtypes(System.Type)">
            <summary>
                Returns a list of plugins found that are subtypes of that given.
            </summary>
            <param name="type">The type to filter by.</param>
            <returns>The types found.</returns>
        </member>
        <member name="T:DarkRift.Server.PluginRecord">
            <summary>
                A record for persistent storage of plugin data.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginRecord.ID">
            <summary>
                The ID of the record.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginRecord.Name">
            <summary>
                The name of the plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginRecord.Version">
            <summary>
                The version of the plugin currently installed.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginRecord.#ctor(System.UInt32,System.String,System.Version)">
            <summary>
                Creates a new plugin record.
            </summary>
            <param name="id">The ID of the record.</param>
            <param name="name">The name of the plugin.</param>
            <param name="version">The version of the plugin currently installed.</param>
        </member>
        <member name="T:DarkRift.Server.ClientConnectedEventArgs">
            <summary>
                Event arguments for the <see cref="E:DarkRift.Server.ClientManager.ClientConnected"/> event.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientConnectedEventArgs.Client">
            <summary>
                The <see cref="P:DarkRift.Server.ClientConnectedEventArgs.Client"/> object for the new client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientConnectedEventArgs.RemoteTcpEndPoint">
            <summary>
                The remote end point of the TCP connection to this client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientConnectedEventArgs.RemoteUdpEndPoint">
            <summary>
                The remote end point of the UDP connection to this client.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ClientConnectedEventArgs.#ctor(DarkRift.Server.IClient)">
            <summary>
                Creates a new ClientConnectedEventArgs from the given data.
            </summary>
            <param name="clientConnection">The ClientConnection of the new client.</param>
        </member>
        <member name="T:DarkRift.Server.Client">
            <inheritDoc />
        </member>
        <member name="E:DarkRift.Server.Client.MessageReceived">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.ID">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.RemoteTcpEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.RemoteUdpEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.IsConnected">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.Strikes">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.ConnectionTime">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.MessagesSent">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.MessagesPushed">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.MessagesReceived">
            <inheritdoc/>
        </member>
        <member name="F:DarkRift.Server.Client.connection">
            <summary>
                The connection to the client.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Client.server">
            <summary>
                The server we belong to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Client.#ctor(DarkRift.Server.NetworkServerConnection,System.UInt16,DarkRift.Server.DarkRiftServer)">
            <summary>
                Creates a new client connection with a given global identifier and the client they are connected through.
            </summary>
            <param name="connection">The connection we handle.</param>
            <param name="id">The ID assigned to this client.</param>
            <param name="server">The server we belong to.</param>
        </member>
        <member name="M:DarkRift.Server.Client.SendID">
            <summary>
                Sends the client their ID.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Client.SendMessage(DarkRift.Message,DarkRift.SendMode)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Client.Disconnect">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Client.Disconnected(System.Net.Sockets.SocketError)">
            <summary>
                Handles a remote disconnection.
            </summary>
            <param name="error">The error that caused the disconnection.</param>
        </member>
        <member name="M:DarkRift.Server.Client.HandleIncomingDataBuffer(System.Byte[],DarkRift.SendMode)">
            <summary>
                Handles data that was sent from this client.
            </summary>
            <param name="buffer">The buffer that was received.</param>
            <param name="sendMode">The method data was sent using.</param>
        </member>
        <member name="M:DarkRift.Server.Client.HandleIncomingMessage(DarkRift.Message,DarkRift.SendMode)">
            <summary>
                Handles messages that were sent from this client.
            </summary>
            <param name="message">The message that was received.</param>
            <param name="sendMode">The method data was sent using.</param>
        </member>
        <member name="M:DarkRift.Server.Client.PushBuffer(System.Byte[],DarkRift.SendMode)">
            <summary>
                Pushes a buffer to the client.
            </summary>
            <param name="buffer">The buffer to push.</param>
            <param name="sendMode">The method to send the data using.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="M:DarkRift.Server.Client.Strike(DarkRift.Server.StrikeReason,System.String)">
            <summary>
                Informs plugins and adds a strike to this client's record.
            </summary>
            <param name="reason">The reason for the strike.</param>
            <param name="message">A message describing the reason for the strike.</param>
        </member>
        <member name="M:DarkRift.Server.Client.Dispose">
            <summary>
                Disposes of this client.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Command">
            <summary>
                A command that can be issued on the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Command.Name">
            <summary>
                The name of the command.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Command.Description">
            <summary>
                A description of the command.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Command.Usage">
            <summary>
                A description of the command's usage.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Command.Handler">
            <summary>
                The action to be executed when the command is invoked.
            </summary>
            <remarks>
                If the syntax of a command is incorrect a <see cref="T:DarkRift.Server.CommandSyntaxException"/> should be 
                thrown to indicate this.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Command.#ctor(System.String,System.String,System.String,System.EventHandler{DarkRift.Server.CommandEventArgs})">
            <summary>
                Creates a new command object.
            </summary>
            <param name="name">The name of the command that will be typed in at the console.</param>
            <param name="description">The description of the command for the command manual.</param>
            <param name="usage">How the command should be invoked for the command manual.</param>
            <param name="handler">The event handler that should be used if the command is invoked.</param>
        </member>
        <member name="T:DarkRift.Server.CommandEngine">
            <summary>
                Handles commands sent into the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.CommandEngine.server">
            <summary>
                The owning server instance.
            </summary>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.HandleCommand(System.String)">
            <summary>
                Invokes a command on the specified plugin.
            </summary>
            <param name="command">The command to invoke.</param>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.FindCommand(System.String)">
            <summary>
                Searches all plugins for a given command.
            </summary>
            <param name="command">The command to search for.</param>
            <returns>The command.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetIntendedPlugin(System.String)">
            <summary>
                Gets the plugin a command was intended for or null if none was specified.
            </summary>
            <param name="command">The command to parse</param>
            <returns>The name of the plugin the command is intended for.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetCommandAndArgs(System.String)">
            <summary>
                Returns the command part of a given input string.
            </summary>
            <param name="command">The command to parse.</param>
            <returns>The name and arguments of the command invoked.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetCommandName(System.String)">
            <summary>
                Returns the name of the command to be executed.
            </summary>
            <param name="command">The command to parse.</param>
            <returns>The name or the command invoked.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetArguments(System.String)">
            <summary>
                Returns the arguments of the command to be executed.
            </summary>
            <param name="command">The command to parse.</param>
            <returns>The argument string of the command invoked</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.ParseArguments(System.String)">
            <summary>
                Returns an array of raw arguments in the command invoked.
            </summary>
            <param name="arguments">The arguments part of the invocation.</param>
            <returns>The list of raw arguments for the invocation.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetArguments(System.String[])">
            <summary>
                Returns an array of arguments in the command invoked.
            </summary>
            <param name="rawArguments">The raw arguments parsed from the invocation.</param>
            <returns>The list of arguments for the invocation.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetFlags(System.String[])">
            <summary>
                Returns the flags from the command invoked.
            </summary>
            <param name="rawArguments">The raw arguments parsed from the invocation.</param>
            <returns>The flags for the invocation.</returns>
        </member>
        <member name="T:DarkRift.Server.CommandEventArgs">
            <summary>
                Event arguments for <see cref="P:DarkRift.Server.CommandEventArgs.Command"/> callbacks.
            </summary>
        </member>
        <member name="P:DarkRift.Server.CommandEventArgs.Command">
            <summary>
                The command being executed.
            </summary>
        </member>
        <member name="P:DarkRift.Server.CommandEventArgs.OriginalCommand">
            <summary>
                The command as typed in by the user.
            </summary>
        </member>
        <member name="P:DarkRift.Server.CommandEventArgs.RawArguments">
            <summary>
                The arguments the command was called with.
            </summary>
        </member>
        <member name="P:DarkRift.Server.CommandEventArgs.Arguments">
            <summary>
                The arguments passed with the command that weren't flags.
            </summary>
        </member>
        <member name="P:DarkRift.Server.CommandEventArgs.Flags">
            <summary>
                The flags that were passed with the command.
            </summary>
        </member>
        <member name="F:DarkRift.Server.CommandEventArgs.logManager">
            <summary>
                The log manager to output syntax errors to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.CommandEventArgs.HasFlag(System.String)">
            <summary>
                Returns whether the arguments contain the specified flag.
            </summary>
            <param name="name">The name of the flag.</param>
            <returns>Whether the flag is present.</returns>
        </member>
        <member name="T:DarkRift.Server.DarkRiftServer">
            <summary>
                The main server class.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.InternalLogManager">
            <summary>
                The manager for logs.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.PluginFactory">
            <summary>
                The factory for plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.InternalClientManager">
            <summary>
                The client manager handling all clients on this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.ClientManager">
            <summary>
                The client manager handling all clients on this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.PluginManager">
            <summary>
                The manager for all plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.CommandEngine">
            <summary>
                The handler for all commands issued from the user.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.DatabaseManager">
            <summary>
                The manager for databases.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.Dispatcher">
            <summary>
                The server's dispatcher.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.DispatcherWaitHandle">
            <summary>
                The dispatcher's wait handle.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.EventsFromDispatcher">
            <summary>
                Whether events are executed through the dispatcher or not.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.ServerInfo">
            <summary>
                Information about this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.DataManager">
            <summary>
                The manager for server data.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftServer.dispatcher">
            <summary>
                The dispatcher for the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftServer.InternalPluginManager">
            <summary>
                The server plugin manager.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.#ctor(DarkRift.Server.ServerSpawnData)">
            <summary>
                Creates a new server given spawn details.
            </summary>
            <param name="spawnData">The details of how to start the server.</param>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.Start">
            <summary>
                Starts the server.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.ExecuteDispatcherTasks">
            <summary>
                Executes all tasks waiting in the dispatcher.
            </summary>
            <remarks>
                This must be invoked from the same thread that constructs the server since this is deemed the 'main' thread.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.ExecuteCommand(System.String)">
            <summary>
                Executes a given command on the server.
            </summary>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.MakeThreadSafe">
            <summary>
                Forces the server to invoke events through the dispatcher.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.Dispose">
            <summary>
                Disposes of the server.
            </summary>
        </member>
        <member name="T:DarkRift.Server.DatabaseManager">
            <summary>
                Manages the connection strings used by server plugins.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DatabaseManager.connectionStrings">
            <summary>
                The connection strings we are aware of.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DatabaseManager.GetConnectionString(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.DatabaseManager.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.MessageReceivedEventArgs">
            <summary>
                Arguments for the <see cref="E:DarkRift.Server.Client.MessageReceived"/> event.
            </summary>
        </member>
        <member name="P:DarkRift.Server.MessageReceivedEventArgs.SendMode">
            <summary>
                The method the data was sent using.
            </summary>
        </member>
        <member name="P:DarkRift.Server.MessageReceivedEventArgs.Client">
            <summary>
                The client the message was received from.
            </summary>
        </member>
        <member name="P:DarkRift.Server.MessageReceivedEventArgs.Tag">
            <summary>
                The tag the message was sent with.
            </summary>
        </member>
        <member name="F:DarkRift.Server.MessageReceivedEventArgs.message">
            <summary>
                The message received.
            </summary>
        </member>
        <member name="M:DarkRift.Server.MessageReceivedEventArgs.#ctor(DarkRift.Message,DarkRift.SendMode,DarkRift.Server.IClient)">
            <summary>
                Creates a new args object for the <see cref="E:DarkRift.Server.Client.MessageReceived"/> event.
            </summary>
            <param name="message">The message received.</param>
            <param name="sendMode">The send mode the message was received with.</param>
            <param name="client">The client the message was received from.</param>
        </member>
        <member name="M:DarkRift.Server.MessageReceivedEventArgs.GetMessage">
            <summary>
                Gets the message received.
            </summary>
            <returns>An new instance of the message received.</returns>
        </member>
        <member name="T:DarkRift.Server.Plugin">
            <summary>
                Base class for DarkRift control plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugin.ClientManager">
            <summary>
                The manager for all clients on this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugin.PluginManager">
            <summary>
                The manager for all plugins on this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugin.ResourceDirectory">
            <summary>
                The location of this plugins resource store.
            </summary>
            <remarks>
                The resource directory can be used to store any external resources your plugin requires such as web 
                files etc. It will be removed when uninstalling your plugin so you should not store any files elsewhere.
                
                This location may not exist if called from the constructor, use the <see cref="!:Loaded"/> event instead.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Plugin.#ctor(DarkRift.Server.PluginLoadData)">
            <summary>
                Creates a new plugin using the given plugin load data.
            </summary>
            <param name="pluginLoadData">The plugin load data for this plugin.</param>
        </member>
        <member name="T:DarkRift.Server.PluginLoadData">
            <summary>
                Data related to the plugin's loading.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginLoadData.Name">
            <summary>
                The name to give the plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginLoadData.Server">
            <summary>
                The server that owns this plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginLoadData.Settings">
            <summary>
                The settings this plugin was given.
            </summary>
        </member>
        <member name="T:DarkRift.Server.PluginManager">
            <summary>
                The manager of all plugins on the server.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginManager.#ctor(DarkRift.Server.DarkRiftServer)">
            <summary>
                Creates a new PluginManager.
            </summary>
            <param name="server">The server that owns this plugin manager.</param>
        </member>
        <member name="M:DarkRift.Server.PluginManager.LoadPlugins(DarkRift.Server.ServerSpawnData.PluginsSettings)">
            <summary>
                Loads the plugins found by the plugin factory.
            </summary>
            <param name="settings">The settings to load plugins with.</param>
        </member>
        <member name="P:DarkRift.Server.PluginManager.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.PluginManager.GetPluginByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.PluginManager.GetPluginByType``1">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.PluginManager.GetAllPlugins">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.PluginManager.ActuallyGetAllPlugins">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.ClientManager">
            <summary>
                Handles all clients on the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.listener">
            <summary>
                The listener for connections to connect to.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.Address">
            <summary>
                The address he server is listening on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.Port">
            <summary>
                The port the server is listening on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.IPVersion">
            <summary>
                The IP version that the server is listening on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.NoDelay">
            <summary>
                Whether Nagle's algorithm is disabled.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.Listening">
            <summary>
                Returns whether the server has been started and not yet stopped.
            </summary>
        </member>
        <member name="E:DarkRift.Server.ClientManager.ClientConnected">
            <summary>
                Invoked when a client connects to the server.
            </summary>
        </member>
        <member name="E:DarkRift.Server.ClientManager.ClientDisconnected">
            <summary>
                Invoked when a client disconnects from the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.Count">
            <summary>
                Returns the number of clients currently connected.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.MaxStrikes">
            <summary>
                The number of strikes a client can get before they are kicked.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.UseFallbackNetworking">
            <summary>
                Whether the fallback networking is being used for compatability.
            </summary>
            <remarks>
                Unity has issues with DarkRift's default (better) socket interfaces so this indicates
                the fallback networking is in use for compatability at a performance cost.
            </remarks>
        </member>
        <member name="F:DarkRift.Server.ClientManager.clients">
            <summary>
                The clients connected to this server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.server">
            <summary>
                The server instance owning us.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.lastIDAllocated">
            <summary>
                The last ID allocated on this server
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.idLockObj">
            <summary>
                The lock on ID allocation
            </summary>
        </member>
        <member name="M:DarkRift.Server.ClientManager.NewConnection(DarkRift.Server.NetworkServerConnection)">
            <summary>
                Called when a new client connects.
            </summary>
            <param name="connection">The new client.</param>
        </member>
        <member name="M:DarkRift.Server.ClientManager.HandleDisconnection(DarkRift.Server.Client,System.Boolean,System.Net.Sockets.SocketError)">
            <summary>
                Handles a client disconnecting. 
            </summary>
            <param name="client">The client disconnecting.</param>
            <param name="localDisconnect">If the disconnection was caused by a call to <see cref="M:DarkRift.Server.Client.Disconnect"/></param>
            <param name="error">The error that caused the disconnect.</param>
        </member>
        <member name="M:DarkRift.Server.ClientManager.GetAllClients">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.ClientManager.Item(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.ClientManager.GetClient(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.ClientManager.Start">
            <summary>
                Starts the manager listening for new connections.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData">
            <summary>
                Details of how to start a new server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerSpawnData.Server">
            <summary>
                The general settings for the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerSpawnData.PluginSearch">
            <summary>
                The locations to search for plugins in.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerSpawnData.Data">
            <summary>
                The settings for the data handler plugins and general persistent storage.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerSpawnData.Logging">
            <summary>
                The settings for the log writer plugins and general logging.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerSpawnData.DataConnectors">
            <summary>
                The settings for resolving and loading data connectors.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerSpawnData.Plugins">
            <summary>
                The settings for resolving and loading plugins.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerSpawnData.Databases">
            <summary>
                The settings for database connections.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerSpawnData.Cache">
            <summary>
                The settings for the object cache.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.EventsFromDispatcher">
            <summary>
                Whether events are executed through the dispatcher or not.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.ServerSettings">
            <summary>
                Holds settings related to the overall server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.Address">
            <summary>
                The address the servver will listen on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.Port">
            <summary>
                The port number that the server should listen on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.IPVersion">
            <summary>
                The IP version to host the server on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.NoDelay">
            <summary>
                Whether to disable Nagle's algorithm.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.MaxStrikes">
            <summary>
                The number of strikes that can be received before the client is automatically kicked.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.UseFallbackNetworking">
            <summary>
                Whether the fallback networking system should be used for compatability with Unity.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.ServerSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the server settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.PluginSearchSettings">
            <summary>
                Holds the paths to search for plugins from.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginSearchPaths">
            <summary>
                The paths to search.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginTypes">
            <summary>
                Individual types of plugins that should be loaded.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginSearchPath">
            <summary>
                A path to search.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginSearchPath.Source">
            <summary>
                The path.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginSearchPath.CreateDirectory">
            <summary>
                Whether the directory should be created if missing.
            </summary>
            <remarks>This has no effect when the path is a file.</remarks>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginSearchPath.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the path from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.PluginSearchSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the server settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.DataSettings">
            <summary>
                Holds settings for persistent data storage.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DataSettings.Directory">
            <summary>
                The directory to store data in.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.DataSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the server settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.LoggingSettings">
            <summary>
                Holds settings related to loading the logging system.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriters">
            <summary>
                The log writers to use.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings">
            <summary>
                Holds settings about a log writer.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.Name">
            <summary>
                The name of the log writer.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.Type">
            <summary>
                The type of log writer.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.LogLevels">
            <summary>
                The types of logs to be directed to this writer.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.Settings">
            <summary>
                Settings that should be loaded for this writer.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.#ctor">
            <summary>
                Creates a new LoggingSettings object.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the log writer settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.ParseLogType(System.String)">
            <summary>
                Parses a string to a log type.
            </summary>
            <param name="logType">The type to parse</param>
            <returns>The parsed type.</returns>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.LoggingSettings.#ctor">
            <summary>
                Creates a new LoggingSettings object.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.LoggingSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the logging settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.DataConnectorsSettings">
            <summary>
                Handles the settings for data connectors.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DataConnectorsSettings.LoadByDefault">
            <summary>
                The action to perform on all unlisted data connectors.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DataConnectorsSettings.DataConnectors">
            <summary>
                The list of data connectors to load.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.DataConnectorsSettings.DataConnectorSettings">
            <summary>
                Holds settings about a data connector.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DataConnectorsSettings.DataConnectorSettings.Type">
            <summary>
                The type of data connector.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DataConnectorsSettings.DataConnectorSettings.Load">
            <summary>
                Whether to load or ignore this data connector.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DataConnectorsSettings.DataConnectorSettings.Settings">
            <summary>
                Settings that should be loaded for this writer.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.DataConnectorsSettings.DataConnectorSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the data connector settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.DataConnectorsSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the plugins settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.PluginsSettings">
            <summary>
                Handles the settings for plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginsSettings.LoadByDefault">
            <summary>
                The action to perform on all unlisted plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginsSettings.Plugins">
            <summary>
                The list of plugins to load.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.PluginsSettings.PluginSettings">
            <summary>
                Holds settings about a plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginsSettings.PluginSettings.Type">
            <summary>
                The type of plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginsSettings.PluginSettings.Load">
            <summary>
                Whether to load or ignore this plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginsSettings.PluginSettings.Settings">
            <summary>
                Settings that should be loaded for this writer.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.PluginsSettings.PluginSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the plugin settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.PluginsSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the plugins settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.DatabaseSettings">
            <summary>
                Holds settings related to loading databases for plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DatabaseSettings.Databases">
            <summary>
                The databases to connect to.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.DatabaseSettings.DatabaseConnectionData">
            <summary>
                Holds data relating to a specific connection.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DatabaseSettings.DatabaseConnectionData.Name">
            <summary>
                The name of the connection.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DatabaseSettings.DatabaseConnectionData.ConnectionString">
            <summary>
                The connection string to create the connection with.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.DatabaseSettings.DatabaseConnectionData.#ctor(System.String,System.String)">
            <summary>
                Creates a new Database Connection data object.
            </summary>
            <param name="name">The name of the connection.</param>
            <param name="connectionString">The connection string for the connection.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.DatabaseSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the database settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.CacheSettings">
            <summary>
                Holds settings related to the object cache.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.MaxCachedWriters">
            <summary>
                The maximum number of <see cref="T:DarkRift.DarkRiftWriter"/> instances stored per thread.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.MaxCachedReaders">
            <summary>
                The maximum number of <see cref="T:DarkRift.DarkRiftReader"/> instances stored per thread.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.MaxCachedMessages">
            <summary>
                The maximum number of <see cref="T:DarkRift.Message"/> instances stored per thread.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.MaxCachedSocketAsyncEventArgs">
            <summary>
                The maximum number of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instances stored per thread.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.MaxActionDispatcherTasks">
            <summary>
                The maximum number of <see cref="T:DarkRift.Dispatching.ActionDispatcherTask"/> instances stored per thread.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.CacheSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the cache settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.CreateFromXml(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
                Creates a server spawn data from specified XML configuration file.
            </summary>
            <param name="filePath">The path of the XML file.</param>
            <param name="variables">The variables to inject into the configuration.</param>
            <returns>The ServerSpawnData created.</returns>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.#ctor(System.Net.IPAddress,System.UInt16,DarkRift.IPVersion)">
            <summary>
                Creates a new server spawn data with necessary settings.
            </summary>
            <param name="address">The address the server should listen on.</param>
            <param name="port">The port the server should listen on.</param>
            <param name="ipVersion">The IP protocol the server should listen on.</param>
        </member>
        <member name="T:DarkRift.Server.DataManager">
            <summary>
                Handles the persistent data for a DarkRift instance.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DataManager.pluginsFileName">
            <summary>
                The name of the plugins DB file.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DataManager.pluginsFileMutex">
            <summary>
                The name of the plugins DB mutex.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DataManager.server">
            <summary>
                The server this belongs to.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DataManager.dataDirectory">
            <summary>
                The directory for storing data in.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DataManager.GetResourceDirectory(System.String)">
            <summary>
                Gets the location of a plugins resources directory.
            </summary>
            <param name="pluginName">The name of the plugin.</param>
            <returns>The path to the resource directory.</returns>
        </member>
        <member name="M:DarkRift.Server.DataManager.CreateResourceDirectory(System.String)">
            <summary>
                Creates the resource directory for a plugin if it doesn't exist.
            </summary>
            <param name="pluginName">The name of the plugin.</param>
        </member>
        <member name="M:DarkRift.Server.DataManager.DeleteResourceDirectory(System.String)">
            <summary>
                Deletes the resource directory for a plugin.
            </summary>
            <param name="pluginName">The name of the plugin.</param>
        </member>
        <member name="M:DarkRift.Server.DataManager.ReadAndSetPluginRecord(System.String,System.Version)">
            <summary>
                Atomically reads a plugin record and updates the fields as specified or
                creates a new record if not present.
            </summary>
            <param name="name">The plugin to read and set.</param>
            <param name="version">The version to update the record to.</param>
        </member>
        <member name="M:DarkRift.Server.DataManager.ReadPluginRecord(System.String)">
            <summary>
                Reads a record from the plugin metadata.
            </summary>
            <param name="name">The name fo the plugin.</param>
            <returns>The plugin record.</returns>
        </member>
        <member name="M:DarkRift.Server.DataManager.ReadAllPluginRecords">
            <summary>
                Returns all records in the plugins table.
            </summary>
            <returns>The records stored.</returns>
        </member>
        <member name="M:DarkRift.Server.DataManager.DeletePluginRecord(System.String)">
            <summary>
                Deletes a record from the plugin table.
            </summary>
            <param name="name">The plugin to delete.</param>
        </member>
        <member name="M:DarkRift.Server.DataManager.CreatePluginsTable">
            <summary>
                Creates a new table for storing plugin metadata.
            </summary>
        </member>
        <member name="T:DarkRift.Server.StrikeReason">
            <summary>
                Reasons for strikes to be issued to clients.
            </summary>
        </member>
        <member name="F:DarkRift.Server.StrikeReason.InvalidMessageLength">
            <summary>
                Specifies the message wasn't long enough contain the message header.
            </summary>
        </member>
        <member name="F:DarkRift.Server.StrikeReason.InvalidCommand">
            <summary>
                Specifies the command the client sent was not accepted by the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.StrikeReason.PluginRequest">
            <summary>
                Specifies a plugin requested the strike.
            </summary>
        </member>
        <member name="T:DarkRift.Server.UpgradeEventArgs">
            <summary>
                Event arguments for plugin upgrades.
            </summary>
        </member>
        <member name="P:DarkRift.Server.UpgradeEventArgs.PreviousVersion">
            <summary>
                The previous version of the plugin installed.
            </summary>
        </member>
        <member name="T:DarkRift.Server.WriteEventArgs">
            <summary>
                Arguments passed to loggers when reporting an event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.WriteEventArgs.Sender">
            <summary>
                The component that sent the message.
            </summary>
        </member>
        <member name="F:DarkRift.Server.WriteEventArgs.Message">
            <summary>
                The message that was sent.
            </summary>
        </member>
        <member name="F:DarkRift.Server.WriteEventArgs.LogType">
            <summary>
                The type of log that was sent.
            </summary>
        </member>
        <member name="F:DarkRift.Server.WriteEventArgs.Exception">
            <summary>
                The exception (if present) that caused the event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.WriteEventArgs.FormattedMessage">
            <summary>
                A formatted version of the event.
            </summary>
            <remarks>
                For efficiency you should log this whereever possible rather than re build your own formatted
                string for the message as this will be precomputed once for all log writers and it well optimized.
                It is also more consistent to those reading logs if tey are all the same format.
            </remarks>
        </member>
        <member name="F:DarkRift.Server.WriteEventArgs.LogTime">
            <summary>
                The time the log occured.
            </summary>
        </member>
        <member name="M:DarkRift.Server.WriteEventArgs.#ctor(System.String,System.String,DarkRift.LogType,System.Exception,System.String,System.DateTime)">
            <summary>
                Creates a new write event for log writers.
            </summary>
            <param name="sender">The object that logged the message.</param>
            <param name="message">The message logged.</param>
            <param name="logType">The log level of the message logged.</param>
            <param name="exception">The exception triggering the message, if one occured.</param>
            <param name="formattedMessage">A forrmatted string of the message details.</param>
            <param name="logTime">The time the message was logged.</param>
        </member>
        <member name="T:DarkRift.Server.XmlConfigurationException">
            <summary>
                An exception raised for invalid XML configuration files.
            </summary>
        </member>
        <member name="M:DarkRift.Server.XmlConfigurationException.#ctor(System.String)">
            <summary>
                Create and new exception for XML configurations with a message.
            </summary>
            <param name="msg">The message for the exception.</param>
        </member>
        <member name="M:DarkRift.Server.XmlConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
                Create and new exception for XML configurations with a message and inner exception.
            </summary>
            <param name="msg">The message for the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
    </members>
</doc>
